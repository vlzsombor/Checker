@using Checker.Client.Data
@using Microsoft.AspNetCore.SignalR.Client;


<h3>Checkerboard</h3>

@code {

    [Parameter, EditorRequired]
    public HubConnection? hubConnection { get; set; }
    [Parameter]
    public string TableId { get; set; }
    [Parameter]
    public bool IsWhitePlayer { get; set; }

    List<Checker> blackCheckers = new List<Checker>();
    List<Checker> whiteCheckers = new List<Checker>();
    Checker? activeChecker = null;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < UtilFunctions.MAX_COLUMN; j += 2)
            {
                blackCheckers.Add(new Checker
                    {
                        Color = "black",
                        Row = i,
                        Column = j,
                        Direction = CheckerDirection.Down
                    });
            }
        }

        for (int i = 5; i < UtilFunctions.MAX_COLUMN; i++)
        {
            for (int j = (i + 1) % 2; j < UtilFunctions.MAX_ROW; j += 2)
            {
                whiteCheckers.Add(
                    new Checker
                        {
                            Color = "white",
                            Row = i,
                            Column = j,
                            Direction = CheckerDirection.Up
                        });
            }
        }


        hubConnection?.On("TableJoined", () =>
        {
            Console.WriteLine("Someone joined our table");
        });

        hubConnection?.On<int, int, int, int>("Move", ServerMove);
    }
    bool whiteTurn = true;

    List<(int row, int column)> cellsPossible = new();
    void EvaulateCheckerPosition()
    {
        cellsPossible.Clear();
        if (activeChecker is not null)
        {
            List<int> rowsPossible = new();


            if (activeChecker.Direction == CheckerDirection.Down ||
                activeChecker.Direction == CheckerDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row + 1);
            }
            if (activeChecker.Direction == CheckerDirection.Up ||
                activeChecker.Direction == CheckerDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row - 1);
            }
            foreach (var row in rowsPossible)
            {
                EvaulateSpot(row, activeChecker.Column - 1);
                EvaulateSpot(row, activeChecker.Column + 1);
            }

        }
    }

    void ServerMove(int previousRow, int previousCol, int newRow, int newCol)
    {
        var checker = select(blackCheckers, (previousRow, previousCol));

        if (checker is null)
        {
            checker = select(whiteCheckers, (previousRow, previousCol));
        }
        activeChecker = checker;
        EvaulateCheckerPosition();
        MoveChecker(newRow, newCol);

    }

    bool canMoveHere(int row, int column) => cellsPossible.Contains((row, column));

    void MoveChecker(int row, int column)
    {
        if (activeChecker is null)
            return;
        if (!canMoveHere(row, column))
            return;

        if (Math.Abs(activeChecker.Column - column) == 2)
        {

            int jumpedRow = Math.Abs((activeChecker.Row + row) / 2);
            int jumpedColumn = Math.Abs((activeChecker.Column + column) / 2);
            var result = select(blackCheckers, (jumpedRow, jumpedColumn));
            if (result != null)
            {
                blackCheckers.Remove(result);

            }
            else
            {
                result = select(whiteCheckers, (jumpedRow, jumpedColumn));
                if (result != null)
                    whiteCheckers.Remove(result);
            }
        }

        hubConnection?.SendAsync("Move", TableId, activeChecker.Column, activeChecker.Row, column, row);
        //Move checker
        activeChecker.Column = column;
        activeChecker.Row = row;

        if ((activeChecker.Row == 0 && activeChecker.Color == "white")
            || (activeChecker.Row == UtilFunctions.MAX_ROW - 1))
        {
            activeChecker.Direction = CheckerDirection.Both;
        }

        activeChecker = null;
        EvaulateCheckerPosition();
        whiteTurn = !whiteTurn;

        StateHasChanged();
    }

    Func<List<Checker>, (int row, int column), Checker?> select = (checkers, coordinates) => checkers.SingleOrDefault(x => x.Column == coordinates.column && x.Row == coordinates.row);

    void EvaulateSpot(int row, int column, bool firstTime = true)
    {
        var blackChecker = select(blackCheckers, (row, column));
        var whiteChecker = select(whiteCheckers, (row, column));

        if (blackChecker is null && whiteChecker is null)
        {
            cellsPossible.Add((row, column));
        }
        else if (firstTime)
        {
            //Can the cell be jumped
            if ((whiteTurn && blackChecker != null)
            || (!whiteTurn && whiteChecker != null))
            {
                int columnDifference = column - activeChecker.Column;
                int rowDifference = row - activeChecker.Row;



                EvaulateSpot(row + rowDifference, column + columnDifference, false);

            }
        }
    }

    void CheckerClicked(Checker checker)
    {
        if (whiteTurn != IsWhitePlayer)
            return;

        if (whiteTurn && checker.Color == "black"
            ||
            !whiteTurn && checker.Color == "white")
            return;

        activeChecker = checker;
        EvaulateCheckerPosition();
    }
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-sm-7 d-flex">
            <table class="table table-bordered">
                @for (int i = 0; i < UtilFunctions.MAX_ROW; i++)
                {
                    int localI = i;
                    <tr>
                        @for (int j = 0; j < UtilFunctions.MAX_ROW; j++)
                        {
                            int localJ = j;
                            var checker = select(blackCheckers, (i, j));
                            if (checker is null)
                            {
                                checker = select(whiteCheckers, (i, j));
                            }
                            <td>
                                <div id="checkerCell" @onclick="()=> MoveChecker(localI,localJ)" class="content text-center @(canMoveHere(localI, localJ) ? "active" : "")">
                                    @if (checker is not null)
                                    {
                                        <div  @onclick="() => CheckerClicked(checker)" 
                                            class="rounded-circle checker @(checker == activeChecker ? "active" : "" )">

                                            <div class="ratio ratio-1x1 rounded-circle overflow-hidden checker @checker.Color">

                                                <span style="position: absolute; top:50%" class="align-bottom">@(checker.Direction == CheckerDirection.Both ? "K" : "")</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>
</div>